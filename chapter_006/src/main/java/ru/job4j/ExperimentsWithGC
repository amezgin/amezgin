По моему мнению, для приложения заявок из второго модуля больше всего подойдет Parallel GC.
Основным критерием оценки является объем данных. Подразумевается, что заявок будет достаточно много, но не слишком.
Еще один вариант для данного приложения - Concurrent Mark Sweep  GC. Хотя второй вид сборщика ориентирован на
минимизацию времен простоя приложения, однако за это приходиться платить ресурсами процессора и общей пропускной
способностью. Кроме того, данный GC требует больше памяти для стабильной работы (по оценкам оракл примерно на 20%). При
недостатке памяти возможны сбои конкурентного режима работы и увеличение времени простоя. С другой стороны, к плюсам
Parallel GC можно отнести автоматическую подстройку под требуемые параметры производительности и то, что данный сборщик
отлично подходит для систем с небольшим количеством процессоров и памяти.

Для серверного приложения, работающего на многопроцессорных серверах и оперирующего большими объемами данных
идеально подойдет Garbage-First GC. Он учше распределяет сборки во времени, чтобы не допустить длительных остановок
приложения, особенно при больших размерах кучи. Но требует больше ресурсов, поэтому его логично использовать на серверах.
Также к плюсам стоит отнести то, что данный сборщик не фрагментирует память.