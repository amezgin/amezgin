JVM для каждого объекта хранит заголовок объекта, память для примитивных и ссылочных типов, смещение.
Кроме того размер каждого объекта кратен 8 байтам.

У меня 64хбитная JVM, поэтому заголовок займет 16 байт.
Переменная id занимает фиксированный разер в 4 байта.

Поле name имеет тип String.
Класс строки состоит из заголовка (16 байт), переменной hash типа int (4 байта) и ссылочной переменной
на массив value[] типа char (8 байт). Итого 28 байт + 4 байта на выравнивание. И того 32 байта.
Кроме того массив - это еще 1 объект и он занимает 16 байт на заголовок, 4 байта на длину массива,
и по 2 байта на каждый символ. Имя состоит 4 символов. Итого 28 байт + 4 байта на выравнивание. И того 32 байта.

В итоге объект типа User займет в памяти 16 + 4 + 32 + 32 + 4 (смещение) = 88 байт.

Поведение программы.
Итак, я запускаю программу с параметром виртуальной машины "-Xmx1m".
В цикле создаются объекты. В процессе работы программы данные объекты помечаются сборщиком мусора как готовые к удалению,
т.к. никаких живых ссылок на объекты нет. Пока памяти хватает сборщик мусора не запускается. Как только
память заполняется, запускается сборщик мусора, вызывается метод finalize(). Память освобождается. Объекты удаляются.